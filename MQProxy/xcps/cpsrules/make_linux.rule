########################################################################
#                                                                      #
#       Makefile rules file for windows                                #
#                                                                      #
#       All the makefiles in sub directories must include this file    #
#       to get rules to make.                                          #
#																	                    				  			 #
########################################################################


########################################################################
# general definitions
########################################################################

# CPU should be defined outside of this file
TOOL            = gnu                        
OPTIMIZE        = 0
#DEBUG          =	#不定义的话默认是0，在这里定义的话会把在.bat中定义的覆盖掉
#WARNING		   	=	#同上

########################################################################
# Option flags definitions
#	MPC8240 does not need any CC_ARCH_SPEC definitions
########################################################################
ifeq ($(CPU), i686)
  CC_ARCH_SPEC     = -m32
  LD_ARCH_SPEC     = -melf_i386
endif
ifeq ($(CPU), x86_64)
  CC_ARCH_SPEC     = -m64
  LD_ARCH_SPEC     = -melf_x86_64
endif

#C++_COMPILER貌似编译的时候没有用到
CC_COMPILER	       = -rdynamic
C++_COMPILER	   = -DRW_MULTI_THREAD -D_REENTRANT

ifeq ($(GCC_STD_CPP11), 1)
  C++_COMPILER += -std=c++11 -Wl,--no-as-needed
endif

ifeq ($(OPTIMIZE), 1)              
  CC_OPTIM         = -O3 -pedantic
else                               
  CC_OPTIM         =     
endif                              

ifeq ($(XOS_ENABLE_GCOV), 1)
	CC_OPTIM      +=  -fprofile-arcs -ftest-coverage
endif


ifeq ($(WARNING),1)
  CC_WARNINGS	   = -Wall -Wunused-but-set-variable
  C++_WARNINGS     = -Wall -Wunused-but-set-variable
else
  CC_WARNINGS	   = -w
  C++_WARNINGS     = -w
endif

CC_INCLUDE         =-I. -I$(MICR_BASE)/include $(FAMILY_HEAD_DIR) $(TRI_SSI_INC) $(EXTRA_INCLUDE)	#包含的头文件路径

CC_INCLUDE += $(XOS_INC)

								
ifeq ($(CM_OAM_SUPPORT),1)
	  CC_INCLUDE += $(CM_OAM_INC)
endif


CC_DEFINES	   = -DCPU=$(CPU) $(TRI_OS_FLAGS) $(EXTRA_DEFINE) -DLINUX $(XOS_DEFINES)

DEP_INCLUDE         = -I. -I$(MICR_BASE)/include $(FAMILY_HEAD_DIR) $(TRI_SSI_INC) $(EXTRA_INCLUDE)	#头文件目录

DEP_INCLUDE += $(XOS_INC)

								
ifeq ($(CM_OAM_SUPPORT),1)
	  DEP_INCLUDE += $(CM_OAM_INC)
endif

DEP_DEFINES     = -DCPU=$(CPU) $(TRI_OS_FLAGS) $(EXTRA_DEFINE) -DLINUX	$(XOS_DEFINES) #编译宏

ifneq ("$(PRODUCT)","")
  CC_DEFINES   += -D$(PRODUCT) -DCP_PRODUCT=$(PRODUCT)
  DEP_DEFINES  += -D$(PRODUCT) -DCP_PRODUCT=$(PRODUCT) 
endif

ifneq ("$(FEATURES)","")
	ALL_FEATURE=$(subst +, ,$(FEATURES))
  CC_DEFINES   += $(foreach EACH_FEATURE,$(ALL_FEATURE),-D$(EACH_FEATURE))
  DEP_DEFINES  += $(foreach EACH_FEATURE,$(ALL_FEATURE),-D$(EACH_FEATURE))
endif

ifeq ($(TEST_DEBUG),1)
  CC_DEFINES   += -DTEST_DEBUG=$(TEST_DEBUG)
  DEP_DEFINES  += -DTEST_DEBUG=$(TEST_DEBUG)
endif

ifeq ($(DEBUG), 1)
  CC_DEBUG        = -g
  CC_DEFINES      += -DDEBUG
else
  CC_DEBUG        =
endif

CFLAGS          = $(CC_ARCH_SPEC) $(CC_COMPILER) $(CC_OPTIM) $(CC_WARNINGS) \
                  $(CC_INCLUDE) $(CC_DEFINES) $(CC_DEBUG) $(ADDED_CFLAGS) \
                  $(CC_SOFT_FLOAT)

C++FLAGS        = $(CC_ARCH_SPEC) $(C++_COMPILER) $(CC_OPTIM) $(C++_WARNINGS) \
                  $(CC_INCLUDE) $(CC_DEFINES) $(CC_DEBUG) $(ADDED_C++FLAGS) \
                  $(CC_SOFT_FLOAT) -fcheck-new


########################################################################
# toolchain binaries
########################################################################
DEP_CC             = gcc -MM
DEP_CPP            = gcc -MM

ifeq ($(GCC_STD_CPP11), 1)
  DEP_CPP      += -std=c++11 -Wl,--no-as-needed
endif

CC                 = gcc -c -fPIC #-DWSSI_UNIX
CXX                = $(CC)
LD                 = ld $(LD_ARCH_SPEC)
AS                 = #ar rv

MD                 = md
RM                 = rm -f
ECHO               = echo

CP                 = cp
MV                 = mv
MAKE               = make

########################################################################
# implicit rules definitions
########################################################################

..s.o:
	@ $(RM) $@
	$(AS) -o $@ $<

%.o: %.c
	@ $(RM) $@
    ifeq ($(XOS_EXPORT_E_FILE), 1)                 ## -E output extra precompile file
		$(CC) -E $(CFLAGS) $(EXTRA_DEFINE) $< -o $*.E
    else ifeq ($(XOS_EXPORT_S_FILE), 1)            ## -S output extra assembly file
		$(CC) -S $(CFLAGS) $(EXTRA_DEFINE) $<
    endif
	$(CC) $(CFLAGS) $(EXTRA_DEFINE) $<

%.o: %.cpp
	@ $(RM) $@
    ifeq ($(XOS_EXPORT_E_FILE), 1)                 ## -E output extra precompile file
		$(CC) -E $(CFLAGS) $(EXTRA_DEFINE) $< -o $*.E
    else ifeq ($(XOS_EXPORT_S_FILE), 1)            ## -S output extra assembly file
		$(CC) -S $(CFLAGS) $(EXTRA_DEFINE) $<
    endif
	$(CXX) $(C++FLAGS) $(EXTRA_DEFINE) $<
	
%.o: %.cxx
	@ $(RM) $@
	$(CXX) $(C++FLAGS) -c $<
	
%.d: %.c
	$(CC) -MM $(CFLAGS) $< > $@
	
%.d: %.cpp
	$(CC) -MM $(C++FLAGS) $< > $@	
	
%.d: %.cxx
	$(CC) -MM $(C++FLAGS) $< > $@	

                                                              
