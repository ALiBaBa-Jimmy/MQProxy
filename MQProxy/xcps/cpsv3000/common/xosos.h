/***************************************************************
**
**  Xinwei Telecom Technology co., ltd. ShenZhen R&D center
**  
**  Core Network Department  platform team  
**
**  filename: xosos.h
**
**  description: OS封装的公共头文件
**
**  author: wulei
**
**  date:   2006.09.04
**
***************************************************************
**                          history                     
**  
***************************************************************
**   author          date              modification            
**************************************************************/
#ifndef _XOS_OS_H_
#define _XOS_OS_H_
#ifdef __cplusplus
extern "C" {
#endif /* _ _cplusplus */

/*-------------------------------------------------------------
                      包含头文件
--------------------------------------------------------------*/ 
#ifdef XOS_WIN32
#include <direct.h>
#endif /*XOS_WIN32*/

#ifdef XOS_LINUX
#endif /*XOS_LINUX*/

#if (defined (XOS_VXWORKS) || (defined (VX_VTA)))
//#include "stat.h"
#endif /*XOS_VXWORKS*/

#ifdef XOS_SOLARIS 
#endif/*XOS_SOLARIS*/

/*--------------------公共的头文件--------------*/

#include <errno.h>
//#include <sys/types.h>
//#include <sys/stat.h>
#include <stdarg.h>
#include "xosencap.h"
#include "xosfilesys.h"

/*-------------------------------------------------------------
                宏定义
--------------------------------------------------------------*/

/*-------------------------------------------------------------
                结构和枚举声明
--------------------------------------------------------------*/

/*-------------------------------------------------------------
                     全局变量
--------------------------------------------------------------*/

/*-------------------------------------------------------------------------
                     接口函数
-------------------------------------------------------------------------*/

#if 0
/************************************************************************
函数名:    XOS_GetFileLen
功能： 获取文件的长度
输入： filename  -   要读取文件的相对路径名,例如/G711/tone.g729
输出： resultlen -   文件的实际长度
返回： 
XSUCC    -    成功
XERROR    -    失败
说明：
************************************************************************/
XS32 XOS_GetFileLen(XU8 *filename ,XU32 *length);

/************************************************************************
函数名:    XOS_ReadVoxFile
功能： 从文件中读取数据
输入： filename  -   要读取文件的相对路径名,例如/G711/tone.g729
输出：
result   -   用来保存文件内容的数据空间
resultlen -   文件的实际长度
返回：
XSUCC    -    成功
XERROR    -    失败
说明：这里result的空间由应用提供，约定一个最大值
************************************************************************/
XS32 XOS_ReadVoxFile(XU8 *filename ,XU8 *result ,XU32 *resultlen);

/************************************************************************
函数名:    XOS_RemoveFile
功能： 删除文件
输入： filename  -   相对路径名,例如/G711/tone.g729
输出： N/A
返回：
XSUCC    -    成功
XERROR    -    失败
说明： 在删除文件前，要先把所有用到此文件的句柄都关闭
************************************************************************/
XS32 XOS_RemoveFile( XU8 *filename );
#endif


/************************************************************************
函数名:    XOS_VsPrintf 
功能： 将可变参数的字符串格式化，根据写入的最大长度值
将maxlen长度的信息串写入到buffer中
输入:
buffer--存储最终字符串的指针
maxlen--最大可存储的字符串长度值
format--可变参数的格式串

输出：
返回值：处理的最大字符数

说明：maxlen参数必须与buffer可写的长度一致，否则会造成内存异常
************************************************************************/
XS32 XOS_VsPrintf (XCHAR *buffer, XU32 Maxlen, const XCHAR *format, va_list ap);


/************************************************************************
函数名:    XOS_StrNChr
功能： 在字符串str中搜索字符ch第一次出现的位置，搜索到str中第len个字符止
输入：
str    -    待搜索的字符串
ch    -    查找的字符（建议以'@'的方式输入）
len    -    字符串str的长度
输出：
返回值：成功    -    指向第一个ch在str的位置指针，
失败    -    返回XNULL表示未找到

说明：1~255是标准字符库，各系统可能(可以)有自己定义的字符；
比如Windows下大于30000时又有对应的字符；
************************************************************************/
XCHAR * XOS_StrNChr (XCHAR *str , XS32 ch , XU32 len);


/************************************************************************
函数名:    XOS_StrNStr
功能： 得到在stack中第一次包含needle字符串的位置，，搜索到str中第len个字符止
输入：stack    -    目标字符串
needle        -    要查找的字符串
stacklen    -    目标串stack的长度
ndlen    -    待查找串needle的长度
输出：N/A
返回值：成功    -    返回在stack中第一次包含needle字符串的位置指针,
失败    -    返回XNULL表示未找到

  说明：这里result的空间由应用提供，约定一个最大值
************************************************************************/
XCHAR * XOS_StrNStr (XCHAR *stack , XCHAR *needle , XU32 stacklen ,XU32 ndlen);


/************************************************************************
函数名:    XOS_StrToLow
功能： 转换字符串中的字符为小写
输入： string  -   需要转换的字符串
输出： string -   转换后的字符串
返回：
XSUCC    -    成功
XERROR    -    失败
说明： 重要申明，此函数的参数必须是以 char a[] = ""; 的数组形式由应用定义
************************************************************************/
XS32 XOS_StrToLow(XU8 string[] );


/************************************************************************
函数名:    XOS_StrNtoLow
功能： 转换字符串中的字符为小写（只转换前len个字符）
输入：
string  -   需要转换的字符串
len    -    字符串string的长度（内存空间的长度）
输出： string -   转换后的字符串
返回值：
XSUCC    -    成功
XERROR    -    失败
说明： 重要申明，此函数的参数string应该是可写的字符数组空间，
len为string的长度，由应用保证；
************************************************************************/
XS32 XOS_StrNtoLow( XU8 *string , XU32 len );


/************************************************************************
函数名:    XOS_StrToUp
功能： 转换字符串中的字符为大写
输入： string  -   需要转换的字符串
输出： string -   转换后的字符串
返回：
XSUCC    -    成功
XERROR    -    失败
说明：  重要申明，此函数的参数必须是以 char a[] = ""; 的数组形式由应用定义
************************************************************************/
XS32 XOS_StrToUp(XU8 string[] );


/************************************************************************
函数名:    XOS_StrNtoUp
功能： 转换字符串中的字符为大写（只转换前len个字符）
输入：
string  -   需要转换的字符串
len    -    字符串string的长度（内存空间的长度）
输出： string -   转换后的字符串
返回值：
XSUCC    -    成功
XERROR    -    失败
说明：重要申明，此函数的参数string应该是可写的字符数组空间，
len为string的长度，由应用保证；
************************************************************************/
XS32 XOS_StrNtoUp(XU8 *string , XU32 len ); 


/************************************************************************
函数名:    XOS_StrToNum
功能：字符串转换为数字
输入：pStr  -   要转换的字符串
iValue - 返回的数字
输出：iValue - 返回的数字
返回：
XSUCC    -    成功
XERROR    -    失败
说明：
************************************************************************/
XS32 XOS_StrToNum(XCHAR *pStr, XU32 *iValue);

/************************************************************************
函数名:    XOS_StrToNum
功能：字符串转换为64位数字
输入：pStr  -   要转换的字符串
iValue - 返回的数字
输出：iValue - 返回的数字
返回：
XSUCC    -    成功
XERROR    -    失败
说明：
************************************************************************/
XS32 XOS_StrToLongNum(XCHAR *pStr, XU64 *iValue);


#ifdef XOS_VXWORKS
/************************************************************************
函数名:    XOS_SetTime
功能：vxWorks下设置时间的初始值
输入：pTime -   时间初始值
输出：
返回：
XSUCC    -    成功
XERROR    -    失败
说明：由于vxWorks下只能获取1970年1月1日起 加上 板子起来的时长(比如50秒)，
所以需要应用设置一个初始值(比如:07.1.18 15:36:58)以用来调整当前时间；
（但是，获取的时间可精确至10毫秒，所以初始化时可能会有几百毫秒的误差）
建议：此接口一般只在初始化或是网管同步时间时才被调用
************************************************************************/
XS32 XOS_SetTime ( XOS_SERTIME_T  *pTime );
#endif


/************************************************************************
函数名:    XOS_GetLocTime
功能：获取系统时间(本地时间，以字符串的形式返回)
输入：datet -   用来保存时间字串的字符数组
输出：datet -   获取的时间字串
返回：
XSUCC    -    成功
XERROR    -    失败
说明：这里的输入参数是长度为30 的字符数组；
//vx下是1970年1月1日起加上板子起来后的时长(比如加50秒)
注：若传入正确的初始时间，则可以获取当前的真实时间
************************************************************************/
XS32 XOS_GetLocTime(XCHAR *datet);

/************************************************************************
函数名: XOS_GetLocTimeByPri
功能：获取系统时间(本地时间(包括毫秒)，以字符串的形式返回)
输入：sec 返回秒
	mSec 毫秒
	pri 毫秒的精度
输出：
返回：
XSUCC -   成功
XERROR  -   失败
//vx下是1970年1月1日起 加上 板子起来的时长(比如加50秒)
注：若传入正确的初始时间，则可以获取当前的真实时间      
************************************************************************/
XS32 XOS_GetLocTimeByPri(XU32* sec, XU32* mSec, int pri);


/************************************************************************
函数名:    XOS_GetTmTime
功能：获得局部时间。该函数返回struct tm 的结构体
输入：timet    -    用来保存获得时间的结构体变量
输出：timet    -    获得的当前时间
返回值：
XSUCC    -    成功
XERROR    -    失败
说明：这里调用的是time() ，得到time_t结构后再用localtime 转成struct tm 结构
************************************************************************/
XS32 XOS_GetTmTime ( t_XOSTD *timet );

/************************************************************************
函数名:    XOS_GetTimeOfDay
功能：
输入：
输出：
返回值：
XSUCC    -    成功
XERROR    -    失败
说明：
************************************************************************/
XS32 XOS_GetTimeOfDay(struct timeval *tv, void *tz);

#ifndef XOS_VXWORKS
/************************************************************************
函数名:    XOS_Clock
功能：获取进程所占用的CPU的大约时间
输入：clockt    -    用来保存获得时间的变量
输出：clockt    -    获取的时间
返回：
XSUCC    -    成功
XERROR    -    失败
说明： clock获得从系统从开启这个程序进程到程序中调用clock()函
数时之间的CPU时钟计时单元(clock tick)；
// 调用的是clock_t clock( void );，clock_t为XU32型；
注：This routine always returns -1 in VxWorks. VxWorks does not track per-task
time or system idle time. There is no method of determining how long a task
or the entire system has been doing work.
************************************************************************/
XS32 XOS_Clock(t_XOSCT *clockt);
#else
XS32 XOS_Clock(t_XOSCT *clockt);
#endif


/************************************************************************
函数名:    XOS_Time
功能：获取从公元1970年1月1日的UTC时间从0时0分0秒算起到现在所经过的秒数
输入：times    -    用来保存获得时间（秒数）
输出：times    -    获得的当前时间（秒数）
返回：
XSUCC    -    成功
XERROR    -    失败
说明：这里调用的是time();
************************************************************************/
XS32 XOS_Time ( t_XOSTT *times );


/************************************************************************
函数名:    XOS_MkTime
功能：将时间格式由struct tm 转换为time_t
输入：timetm    -    要转换的struct tm结构的时间
输出：times    -    转换后的time_t格式的时间
返回：
XSUCC    -    成功
XERROR    -    失败
说明：
************************************************************************/
XS32 XOS_MkTime(t_XOSTD *timetm , t_XOSTT *times);


/************************************************************************
函数名:    XOS_LocalTime
功能：将时间格式由time_t 转化为struct tm
输入：times    -    要转换的time_t结构的时间
输出：timetm    -    转换后struct tm 结构的时间
返回：
XSUCC    -    成功
XERROR    -    失败
说明：
************************************************************************/
XS32 XOS_LocalTime(XCONST t_XOSTT *times  , t_XOSTD *timetm);


/************************************************************************
函数名:    XOS_Rand
功能：获取一个随机数
输入：
seed  -   生成随机数的种子
gnum    -   生成的随机数
输出：gnum    -   生成的随机数
返回：
XSUCC    -    成功
XERROR    -    失败
说明：seed 必须是无符号整数
************************************************************************/
XU32 XOS_Rand(XU32 seed , XS32 *gnum);


#if 0
/************************************************************************
函数名:    XOS_Randn
输入：num    -    用来保存获取的随机数
输出：num    -    生成的随机数
返回：
XSUCC    -    成功
XERROR    -    失败
说明：用获取当前时间来做为seed
************************************************************************/
XS32 XOS_Randn(XU32 *num);
#endif

XU32 XOS_GetRunTime(void);


/************************************************************************
函数名: XOS_GetSysTicks
功能：获取时钟ticks
输入：无
输出： 
返回：
XSUCC  -   成功
XERROR -   失败
说明：
************************************************************************/
XU32 XOS_GetSysTicks(void);

/************************************************************************
函数名: XOS_TicksToSec
功能：将ticks转换成秒
输入：无
输出： 
返回：
XSUCC  -   成功
XERROR -   失败
说明：
************************************************************************/
XU32 XOS_TicksToSec(XU32 ulTicks);

/************************************************************************
函数名: XOS_TicksToMsec
功能：将ticks转换成毫秒
输入：无
输出： 
返回：
XSUCC  -   成功
XERROR -   失败
说明：
************************************************************************/
XU64 XOS_TicksToMsec(XU32 ulTicks);
/************************************************************************
函数名: XOS_TicksToSecByPri
功能：将ticks转换成秒,根据精度位数，输出秒的精度
输入：无
输出： 
返回：
XSUCC  -   成功
XERROR -   失败
说明：
************************************************************************/
XU32 XOS_TicksToSecByPri(XU32 ulTicks, XU32* sec, XU32* mSec, XS32 pri);
/************************************************************************
函数名: XOS_ResetByQueFull
功能：  消息队列满时重启平台
输入：  tidNum 消息队列满的任务号
        exitFlag 0:平台调用业务注册的回调函数；1:平台退出进程
输出：
返回：
说明：
************************************************************************/
XPUBLIC XVOID XOS_ResetByQueFull(XS32 tidNum,XS32 exitFlag);

typedef XVOID (*RESET_PROC_FUNC)(XVOID);
/************************************************************************
函数名: XOS_ResetProcFuncReg
功能：  注册回调函数，用于系统重启前进行善后处理
输入：  ulFuncAddr 欲注册的函数
输出：
返回：
说明：
************************************************************************/
XS32 XOS_ResetProcFuncReg(void * ulFuncAddr);

/************************************************************************
函数名: XOS_MemProcFuncReg
功能：  注册回调函数，用于系统分配内存出错时业务层进行善后处理
输入：  ulFuncAddr 欲注册的函数
输出：
返回：
说明：
************************************************************************/
XS32 XOS_MemProcFuncReg(void * ulFuncAddr);

extern XVOID XosStackDumpToSyslog(const char *pszBuf);

#ifdef __cplusplus
}
#endif /* _ _cplusplus */

#endif /* _XOS_CONFIG_H_ */

