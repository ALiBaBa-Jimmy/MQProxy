/***************************************************************
**
**  Xinwei Telecom Technology co., ltd. ShenZhen R&D center
**  
**  Core Network Department  platform team  
**
**  filename: xoslist.h
**
**  description:  
**
**  author: wangzongyou
**
**  date:   2006.6.27
**
***************************************************************
**                          history                     
**  
***************************************************************
**   author          date              modification            
**     
**************************************************************/
#ifndef _XOS_LIST_H_
#define _XOS_LIST_H_
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*------------------------------------------------------------------------
                      包含头文件
-------------------------------------------------------------------------*/
#include "xostype.h"



/*-------------------------------------------------------------------------
                          宏定义
-------------------------------------------------------------------------*/
XOS_DECLARE_HANDLE( XOS_HLIST);


/*-------------------------------------------------------------------------
                          结构和枚举声明
-------------------------------------------------------------------------*/
typedef XVOID* nodeType;
typedef XBOOL  (*nodeCmpFunc)(nodeType element1, XVOID *param);
typedef XVOID* (*EFunc)(nodeType elem, XVOID *param);


/************************************************************************
* XOS_listConstruct
* 功能: 创建一个链表 对象
* 输入:
* elemSize                         - 元素的大小(字节为单位)
* maxNumOfElements                 - 最大元素数
* name                             -数组名字
* 输出: 无
* 返回: 成功返回链表对象句柄
*               失败返回XNULL
************************************************************************/
XOS_HLIST XOS_listConstruct(
                            XS32          elemSize,
                            XS32          maxNumOfElements,
                            XCONST XCHAR*  name);


/************************************************************************
* XOS_listDestruct
* 功能: 释放一个链表 对象
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 
************************************************************************/
XVOID XOS_listDestruct(XOS_HLIST hlist);


/************************************************************************
* XOS_listClear
* 功能:清空链表到初始化状态
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 
************************************************************************/
XVOID XOS_listClear(XOS_HLIST hlist);


/************************************************************************
* XOS_listSetCompareFunc
* 功能: 设置比较函数
* 输入:
* hlist                        - 链表句柄
* func                        -比较函数指针
* 输出: 无
* 返回: 成功返回XSUCC,失败返回XERROR.
************************************************************************/
XS32 XOS_listSetCompareFunc( XOS_HLIST hlist,  nodeCmpFunc func);


/************************************************************************
* XOS_listElemIsVacant
* 功能: 判断节点是否为空
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回:检查结果为空返回XTURE, 不为空返回XFALSE
*                失败返回XERROR 
************************************************************************/
XS32 XOS_listElemIsVacant(XOS_HLIST hlist, XS32 location)  ;


/************************************************************************
* XOS_listCurSize
* 功能: 当前链表中元素的个数
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 当前元素的个数,错误返回XERROR
************************************************************************/
XS32 XOS_listCurSize(XOS_HLIST hlist);


/************************************************************************
* XOS_listMaxSize
* 功能:获取链表能存储元素的最大个数
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 最大可以存储元素的个数,错误返回XERROR
************************************************************************/
XS32     XOS_listMaxSize    (XOS_HLIST hlist);


/************************************************************************
* XOS_listHead
* 功能: 获取链表头部元素的索引
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 获取头节点的索引,错误返回XERROR
************************************************************************/
XS32 XOS_listHead(XOS_HLIST hlist);


/************************************************************************
* XOS_listTail
* 功能: 获取链表尾部元素的索引
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 获取尾节点的索引,错误返回XERROR
************************************************************************/
XS32 XOS_listTail(XOS_HLIST hlist);


/************************************************************************
* XOS_listNext
* 功能: 获取下一个节点的索引
* 输入:
* hlist                        - 链表句柄
* location                     - 当前元素的索引
* 输出: 无
* 返回: 下一个节点的索引,错误返回XERROR
************************************************************************/
XS32 XOS_listNext(XOS_HLIST hlist, XS32 location);


/************************************************************************
* XOS_listPrev
* 功能: 获取前一个节点的索引
* 输入:
* hlist                        - 链表句柄
* location                     - 当前元素的索引
* 输出: 无
* 返回: 前一个节点的索引,错误返回XERROR
************************************************************************/
XS32 XOS_listPrev(XOS_HLIST hlist, XS32 location);


/************************************************************************
* XOS_listMaxUsage
* 功能: 获取最大使用过元素,便于统计
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 最大使用过的数量
************************************************************************/
XS32 XOS_listMaxUsage(XOS_HLIST hlist);


/************************************************************************
* XOS_listMaxUsage
* 功能: 通过索引获取元素
* 输入:
* hlist                        - 链表句柄
* location                     - 元素在链表中的索引
* 输出: 无
* 返回: 节点元素的在链表中的首地址
************************************************************************/
nodeType XOS_listGetElem(XOS_HLIST hlist, XS32 location);


/************************************************************************
* XOS_listGetByPtr
* 功能: 通过元素指针获取元素索引
* 输入:
* hlist                        - 链表句柄
* ptr                          - 元素在链表中的首地址
* 输出: 无
* 返回: 索引值,错误返回XERROR
************************************************************************/
XS32 XOS_listGetByPtr(XOS_HLIST hlist, XVOID *ptr);


/************************************************************************
* XOS_listCompare
* 功能: 直接通过比较函数查找匹配的元素
* 输入:
* hlist                        - 链表句柄
* location                     -查找节点的起始索引
* param                        - 比较函数参数
* compare                      - 比较函数
* 输出: 无
* 返回: 匹配元素的索引值,错误返回XERROR
************************************************************************/
XS32 XOS_listCompare(XOS_HLIST hlist, XS32 location, XVOID *param, nodeCmpFunc compare);


/************************************************************************
* XOS_listFind
* 功能:找出匹配的元素
* 输入:
* hlist                        - 链表句柄
* location                     -查找节点的起始索引
* param                        - 比较函数参数
* 输出: 无 
* 返回: 匹配元素的索引值,错误返回XERROR
************************************************************************/
XS32 XOS_listFind(XOS_HLIST hlist, XS32 location, XVOID *param);


/************************************************************************
* XOS_listAdd
* 功能: 向节点索引为location后加一个节点
* 输入:
* hlist       - 链表句柄
* location    - 节点索引
* elem        - 节点的元素(添加节点前先用一个临时变量
*                              存储要添加的元素，添加节点时在接口传入
*                              变量地址，元素类型与创建时相同)
* 输出: 无
* 返回: 添加元素在链中的索引,错误返回XERROR
************************************************************************/
XS32 XOS_listAdd(XOS_HLIST hlist, XS32 location, nodeType elem);


/************************************************************************
* XOS_listAddHead
* 功能:向链表头部加一个节点
* 输入:
* hlist       - 链表句柄
* elem        - 节点的元素(添加节点前先用一个临时变量
*                              存储要添加的元素，添加节点时在接口传入
*                              变量地址，元素类型与创建时相同)
* 输出: 无
* 返回: 添加元素在链中的索引值,错误返回XERROR
************************************************************************/
XS32 XOS_listAddHead(XOS_HLIST hlist, nodeType elem);


/************************************************************************
* XOS_listAddTail
* 功能: 向尾部加一个节点
* 输入:
* hlist       - 链表句柄
* elem        - 节点的元素(添加节点前先用一个临时变量
*                              存储要添加的元素，添加节点时在接口传入
*                              变量地址，元素类型与创建时相同)
* 输出: 无
* 返回: 添加元素在链中的索引值,错误返回XERROR
************************************************************************/
XS32 XOS_listAddTail(XOS_HLIST hlist, nodeType elem);


/************************************************************************
* XOS_listDelete
* 功能:删除指定位置的节点
* 输入:
* hlist                        - 链表句柄
* location                       要删除的节点的索引
* 输出: 无
* 返回: 成功XTRUE, 失败XFALSE
************************************************************************/
XBOOL XOS_listDelete(XOS_HLIST hlist, XS32 location);


/************************************************************************
* XOS_listDeleteHead
* 功能: 删除头节点
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 成功XTRUE, 失败XFALSE
************************************************************************/
XBOOL XOS_listDeleteHead(XOS_HLIST hlist);


/************************************************************************
* XOS_listDeleteTail
* 功能:删除尾部的节点
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 成功XTRUE, 失败XFALSE
************************************************************************/
XBOOL XOS_listDeleteTail(XOS_HLIST hlist);


/************************************************************************
* XOS_listDeleteAll
* 功能: 删除所有的节点
* 输入: hlist                        - 链表句柄
* 输出: 无
* 返回: 
************************************************************************/
XBOOL XOS_listDeleteAll(XOS_HLIST hlist);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /*cmqueue.h*/

