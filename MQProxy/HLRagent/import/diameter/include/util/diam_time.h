#ifndef __UTIL_TIME_H__
#define __UTIL_TIME_H__

#include <util/diam_exception.h>
#include <util/diam_datetime.h>


class TimeException : public Exception
{
public:
    TimeException(const std::string & file, const INT32 & line,const std::string &message);
private:
    std::string _message;
};

///////////////////////////////////////////////////////////////
//	类    名 : Time
//	描    述 : 用来描述时、分、秒和比较时间大小
///////////////////////////////////////////////////////////////
class Time
{
public:
    ///////////////////////////////////////////////////////////////
    //	函 数 名 : Time
    //	函数功能 : 构造函数，初始化为当前时分秒
    //	备    注 :
    //	返 回 值 :
    //	参数说明 : 无
    ///////////////////////////////////////////////////////////////
    Time();

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : Time
    //	函数功能 : 构造函数，根据时分秒初始化
    //	备    注 :
    //	返 回 值 :
    //	参数说明 : Int hour,时，在0~23之间
    //				Int minute,分，在0~59之间
    //				Int second，秒，在0~59之间
    ///////////////////////////////////////////////////////////////
    Time(INT32 hour,INT32 minute,INT32 second);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : Time
    //	函数功能 : 构造函数，根据DateTime参数初始化
    //	备    注 :
    //	返 回 值 :
    //	参数说明 : const DateTime& value
    ///////////////////////////////////////////////////////////////
    Time(const DateTime& value);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : Time
    //	函数功能 : 构造函数，将字符串按指定的格式解释，最终转化为日期时间
    //	备    注 :
    //	返 回 值 :
    //	参数说明 : const string & timeStr：用来初始化的字符串
    //				 const string & fmt：表明字符串的格式，默认为"hh:mi:ss"
    ///////////////////////////////////////////////////////////////
    Time(const std::string &timeStr, const std::string &fmt="hh:mi:ss");

    std::string format(const std::string &fmt="hh:mi:ss");

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : getHour
    //	函数功能 : 得到小时
    //	备    注 :
    //	返 回 值 : Int，值在0~23之间
    //	参数说明 :
    ///////////////////////////////////////////////////////////////
    INT32 getHour();

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : getMinute
    //	函数功能 : 得到分钟
    //	备    注 :
    //	返 回 值 : Int，值在0~59之间
    //	参数说明 :
    ///////////////////////////////////////////////////////////////
    INT32 getMinute();

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : getSecond
    //	函数功能 : 得到秒
    //	备    注 :
    //	返 回 值 : Int，值在0~59之间
    //	参数说明 :
    ///////////////////////////////////////////////////////////////
    INT32 getSecond();

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : getSeconds
    //	函数功能 : 得到离0时0分0秒时的秒数
    //	备    注 :
    //	返 回 值 : Int
    //	参数说明 :
    ///////////////////////////////////////////////////////////////
    INT32 getSeconds();

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : setHour
    //	函数功能 : 设置小时
    //	备    注 :
    //	返 回 值 : void
    //	参数说明 : Int value，值在0~23之间
    ///////////////////////////////////////////////////////////////
    void setHour(INT32 value);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : setMinute
    //	函数功能 : 设置分钟
    //	备    注 :
    //	返 回 值 : void
    //	参数说明 : Int value，值在0~59之间
    ///////////////////////////////////////////////////////////////
    void setMinute(INT32 value);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : setSecond
    //	函数功能 : 设置秒
    //	备    注 :
    //	返 回 值 : void
    //	参数说明 : Int value，值在0~59之间
    ///////////////////////////////////////////////////////////////
    void setSecond(INT32 value);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : set
    //	函数功能 : 同时设置时分秒
    //	备    注 :
    //	返 回 值 : void
    //	参数说明 : Int hour：时，值在0~23之间
    //				 Int minute：分，值在0~59之间
    //				 Int second：秒，值在0~59之间
    ///////////////////////////////////////////////////////////////
    void set(INT32 hour, INT32 minute, INT32 second);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : addSeconds
    //	函数功能 : 在原有时间上增加秒数，如果当前时间加上增加的时间，
    //小时超过24,则求余, 如25小，则变成1小时
    //	备    注 :
    //	返 回 值 : void
    //	参数说明 : Int seconds
    ///////////////////////////////////////////////////////////////
    void addSeconds(INT32 seconds);

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : toDateTimeInToday
    //	函数功能 : 返回所设时间在当天的DateTime值
    //	备    注 :
    //	返 回 值 : DateTime
    //	参数说明 :
    ///////////////////////////////////////////////////////////////
    DateTime toDateTimeInToday() const;
public:
    ///////////////////////////////////////////////////////////////
    //	函 数 名 : operator<
    //	函数功能 : 比较是否比参数中的Time小
    //	返 回 值 : Boolean，如果比参数中的Time小，返回true,否则返回false
    //	参数说明 : const Time& value
    ///////////////////////////////////////////////////////////////
    Boolean operator<(const Time& value) const;

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : operator>
    //	函数功能 : 比较是否比参数中的Time大
    //	返 回 值 : Boolean，如果比参数中的Time大，返回true,否则返回false
    //	参数说明 : const Time& value
    ///////////////////////////////////////////////////////////////
    Boolean operator>(const Time& value) const;

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : operator==
    //	函数功能 : 比较是否与参数中的Time相等
    //	返 回 值 : Boolean，如果与参数中的Time相等，返回true,否则返回false
    //	参数说明 : const Time& value
    ///////////////////////////////////////////////////////////////
    Boolean operator==(const Time& value) const;

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : operator<=
    //	函数功能 : 比较是小于或等于参数中的Time
    //	返 回 值 : Boolean，如果小于或等于参数中的Time，返回true,否则返回false
    //	参数说明 : const Time& value
    ///////////////////////////////////////////////////////////////
    Boolean operator<=(const Time& value) const;

    ///////////////////////////////////////////////////////////////
    //	函 数 名 : operator<=
    //	函数功能 : 比较是大于或等于参数中的Time
    //	返 回 值 : Boolean，如果大于或等于参数中的Time，返回true,否则返回false
    //	参数说明 : const Time& value
    ///////////////////////////////////////////////////////////////
    Boolean operator>=(const Time& value) const;

    template<class Archive>
    void serialize(Archive & ar)
    {
        ar & _hour;
        ar & _minute;
        ar & _second;
    }

private:
    void setDateTime(const DateTime& value);
private:
    INT32 _hour;
    INT32 _minute;
    INT32 _second;

    enum
    {
        seconds_in_hour = 3600,
        seconds_in_minute = 60,
        hours_in_day  = 24
    };
};

#endif//__UTIL_TIME_H__
